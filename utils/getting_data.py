from config_data.config import RAPID_API_KEY
from typing import Dict, Any, Optional
from typing import Iterable
from utils.request_to_api import request_to_api
from datetime import date
from requests.exceptions import Timeout, RequestException, ConnectionError

def get_city_id(city: str) -> Optional[Dict[str, str]]:
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ ID –≥–æ—Ä–æ–¥–∞.
	:param city: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, ID –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏.
	:type city: str
	:return: –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á - —ç—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–π(–µ) –≥–æ—Ä–æ–¥(–∞), –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - ID —ç—Ç–æ–≥–æ(–∏—Ö) –≥–æ—Ä–æ–¥–∞(–æ–≤).
	:rtype: dict
	"""
	result = {}

	url = "https://hotels4.p.rapidapi.com/locations/v3/search"

	querystring = {"q": city, "locale": "ru_RU"}

	headers = {
		"X-RapidAPI-Key": RAPID_API_KEY,
		"X-RapidAPI-Host": "hotels4.p.rapidapi.com"
	}

	try:
		data = request_to_api(method="GET", url=url, headers=headers, params=querystring)

		if data:
			for i_dict in data["sr"]:
				if i_dict["type"] in ("CITY", "NEIGHBORHOOD"):
					result[i_dict["gaiaId"]] = i_dict["regionNames"]["fullName"]

			return result
		return None

	except (KeyError, Timeout, RequestException, ConnectionError):
		return None

def get_hotels(command: str,
			   region_Id: str,
			   check_In_Date: date,
			   check_Out_Date: date,
			   count_hotels: int,
			   sort: str,
			   count_photos: int = 0,
			   params: Optional[dict] = None) -> Iterable[Dict[str, Any]]:
	"""
	–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ—Ç–µ–ª–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ.
	:param command: –≤–≤–µ–¥—ë–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.
	:param region_Id: id –≥–æ—Ä–æ–¥–∞.
	:param check_In_Date: –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞.
	:param check_Out_Date: –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞.
	:param count_hotels: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π.
	:param sort: —Ç–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
	:param count_photos: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–µ–ª—è
	:param params: —Å–ª–æ–≤–∞—Ä—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 'bestdeal'
	"""
	url = "https://hotels4.p.rapidapi.com/properties/v2/list"

	payload = {
		"currency": "USD",
		"locale": "ru_RU",
		"destination": {"regionId": region_Id},
		"checkInDate": {
			"day": check_In_Date.day,
			"month": check_In_Date.month,
			"year": check_In_Date.year
		},
		"checkOutDate": {
			"day": check_Out_Date.day,
			"month": check_Out_Date.month,
			"year": check_Out_Date.year
		},
		"rooms": [{"adults": 1}],
		"resultsStartingIndex": 0,
		"resultsSize": count_hotels,
		"sort": sort,
		"filters": {"price": {
			"max": 0,
			"min": 0
		}}
	}

	if command == "bestdeal":
		payload["filters"]["price"]["max"] = params["max_price"]
		payload["filters"]["price"]["min"] = params["min_price"]
		payload["resultsSize"] += 7

	else:
		payload.pop("filters")

	headers = {
		"content-type": "application/json",
		"X-RapidAPI-Key": RAPID_API_KEY,
		"X-RapidAPI-Host": "hotels4.p.rapidapi.com"
	}

	try:
		data = request_to_api(method="POST", url=url, json=payload, headers=headers)

		if data:
			if data["data"] is not None:
				hotels = data["data"]["propertySearch"]["properties"]

				if command == "highprice":
					hotels = sorted(hotels, key=lambda hotel: hotel["price"]["lead"]["amount"], reverse=True)

				for property in hotels:
					result = get_hotel_info(property_Id=property["id"], count_photos=count_photos)

					result["name"] = property["name"]

					date_in = check_In_Date.strftime("%Y-%m-%d")
					date_out = check_Out_Date.strftime("%Y-%m-%d")

					result["link"] = f'https://www.hotels.com/h{property["id"]}.Hotel-Information' \
									 f'/?chkin={date_in}&chkout={date_out}&x_pwa=1&rm1=a1'

					distance = property["destinationInfo"]["distanceFromDestination"]["value"]
					result["distance"] = f"{distance} –∫–º"
					price = property["price"]["lead"]["formatted"]
					result["price_str"] = get_price_str(line=price)
					result["price"] = property["price"]["lead"]["amount"]
					total_price = property["price"]["displayMessages"][1]["lineItems"][0]["value"]
					result["total_price"] = get_price_str(line=total_price)

					yield result
			else:
				yield None
		else:
			yield None

	except (KeyError, Timeout, RequestException, ConnectionError):
		yield None

def get_hotel_info(property_Id: str,
				   count_photos: int = 0) -> Optional[Dict[str, Any]]:
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ, –∞ –∏–º–µ–Ω–Ω–æ:
	- –∞–¥—Ä–µ—Å –æ—Ç–µ–ª—è,
	- –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–µ–ª—è (–¥–æ–ª–≥–æ—Ç–∞ –∏ —à–∏—Ä–æ—Ç–∞),
	- —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–µ–ª—è,
	- –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–µ–ª—è (–µ—Å–ª–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–¥–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç count_pictures)

	:param property_Id: –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è Id –æ—Ç–µ–ª—è
	:type property_Id: str
	:param count_photos: –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
	:type count_photos: int
	:return: —Å–ª–æ–≤–∞—Ä—å —Å –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ç–µ–ª–µ
	:rtype: dict
	"""
	url = "https://hotels4.p.rapidapi.com/properties/v2/detail"

	payload = {
		"locale": "ru_RU",
		"propertyId": property_Id
	}

	headers = {
		"content-type": "application/json",
		"X-RapidAPI-Key": RAPID_API_KEY,
		"X-RapidAPI-Host": "hotels4.p.rapidapi.com"
	}

	try:
		data = request_to_api(method="POST", url=url, json=payload, headers=headers)

		if data:
			if data["data"]["propertyInfo"]["summary"]["overview"]["propertyRating"] is not None:
				rating = int(data["data"]["propertyInfo"]["summary"]["overview"]["propertyRating"]["rating"])
				rating = rating * "‚≠ê"

			else:
				rating = ''

			result = {
				"address": data["data"]["propertyInfo"]["summary"]["location"]["address"]["addressLine"],
				"latitude": data["data"]["propertyInfo"]["summary"]["location"]["coordinates"]["latitude"],
				"longitude": data["data"]["propertyInfo"]["summary"]["location"]["coordinates"]["longitude"],
				"rating": rating,
				"photos": []
			}

			if count_photos > 0:
				for image in data["data"]["propertyInfo"]["propertyGallery"]["images"]:
					result["photos"].append(image["image"]["url"])

					if len(result["photos"]) == count_photos:
						break

			return result

	except (KeyError, Timeout, RequestException, ConnectionError):
		return None

def get_price_str(line: str) -> str:
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–µ–ª—è.
	:param line: —Å—Ç—Ä–æ–∫–∞.
	:type line: str
	:return: result
	:rtype: str
	"""
	result = ''

	for sym in line:
		if sym.isdigit():
			result += sym

		elif sym == ',':
			result += ' '

	result += " $"

	return result

def get_hotel_info_str(data: dict, count_nights: int) -> str:
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–µ–ª–µ –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
	:param count_nights: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π
	:type count_nights: int
	:param data: —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ—Ç–µ–ª–µ.
	:type data: dict
	:return: text
	:rtype: str
	"""
	text = f"üè† <b>{data['name']}</b> {data['rating']}\n" \
		   f"üìç <b>–ê–¥—Ä–µ—Å:</b> {data['address']}\n" \
		   f"üöï <b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞:</b> {data['distance']}\n" \
		   f"üíµ <b>–¶–µ–Ω–∞ –∑–∞ 1 –Ω–æ—á—å:</b> –æ—Ç {data['price_str']}\n" \
		   f"üí∞ <b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ {count_nights} –Ω–æ—á:</b> {data['total_price']} (–ø—Ä–æ–∂–∏–≤–∞–Ω–∏–µ + –Ω–∞–ª–æ–≥)\n" \
		   f'üõéÔ∏è <a href = "{data["link"]}">–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –æ—Ç–µ–ª–µ–º</a>'

	return text
