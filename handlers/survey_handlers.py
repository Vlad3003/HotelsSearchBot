from loader import bot
from database.db import save_information
from states.hotels_search_information import UserState
from utils.getting_data import get_city_id, get_hotels, get_hotel_info_str, get_price_str
from keyboards.inline.cities_list import cities_list_keyboard
from keyboards.inline.yes_or_no import yes_or_no_keyboard
from keyboards.inline.calendar_keyboard import CalendarKeyboard
from keyboards.inline.history_keyboard import HistoryKeyboard
from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InputMediaPhoto
from datetime import date, timedelta
from loguru import logger

@bot.message_handler(state=UserState.city_id)
@logger.catch
def get_city(message: Message) -> None:
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥–æ—Ä–æ–¥ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤.
	:param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram
	:return: None
	"""
	mes = bot.send_message(chat_id=message.chat.id, text="‚è≥")
	result = get_city_id(city=message.text)

	if result:
		markup = cities_list_keyboard(cities=result)
		bot.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",
							  chat_id=message.chat.id,
							  message_id=mes.message_id,
							  reply_markup=markup)
		with bot.retrieve_data(user_id=message.from_user.id,
							   chat_id=message.chat.id) as data:
			data["cities"] = result

		bot.set_state(user_id=message.from_user.id,
					  state=UserState.max_price,
					  chat_id=message.chat.id)
	else:
		bot.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥!",
							  chat_id=message.chat.id, message_id=mes.message_id)


@bot.callback_query_handler(func=lambda call: call.data.startswith("city_id="))
@logger.catch
def set_city_id(call: CallbackQuery) -> None:
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≥–æ—Ä–æ–¥–æ–º. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏
	–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π.
	:return: None
	"""
	city_id = call.data.split("=")[1]

	with bot.retrieve_data(user_id=call.from_user.id,
						   chat_id=call.message.chat.id) as data:
		data["city_id"] = city_id
		city = data["cities"][city_id]

		bot.edit_message_text(text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {city}",
							  chat_id=call.message.chat.id,
							  message_id=call.message.message_id)

	bot.send_message(chat_id=call.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π")

	bot.set_state(user_id=call.from_user.id,
				  state=UserState.count_hotels,
				  chat_id=call.message.chat.id)

@bot.message_handler(state=UserState.count_hotels)
@logger.catch
def get_count_hotels(message: Message) -> None:
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π.
	:param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram
	:return: None
	"""
	if message.text.isdigit() and (0 < int(message.text) < 16):
		with bot.retrieve_data(user_id=message.from_user.id,
							   chat_id=message.chat.id) as data:
			data["count_hotels"] = int(message.text)

			markup = yes_or_no_keyboard()
			bot.send_message(chat_id=message.chat.id,
							 text="–ù—É–∂–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?",
							 reply_markup=markup)

			bot.set_state(user_id=message.from_user.id,
						  state=UserState.need_photo,
						  chat_id=message.chat.id)
	else:
		bot.send_message(chat_id=message.chat.id,
						 text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–í–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 15!</b>",
						 parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data in ("yes", "no"),
							state=UserState.need_photo)
@logger.catch
def set_count_photos(call: CallbackQuery) -> None:
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω—É–∂–Ω—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª—è,
	—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ò–Ω–∞—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ
	–≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞.
	:return: None
	"""
	if call.data == "no":
		with bot.retrieve_data(user_id=call.from_user.id,
							   chat_id=call.message.chat.id) as data:
			data["count_photos"] = 0
			data["need_photo"] = False
			data["date_in"] = CalendarKeyboard()

			markup = data["date_in"].month()

			bot.edit_message_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:",
								  chat_id=call.message.chat.id,
								  message_id=call.message.message_id,
								  reply_markup=markup)

			bot.set_state(user_id=call.from_user.id,
						  state=UserState.date_in,
						  chat_id=call.message.chat.id)
	else:
		bot.edit_message_text(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
							  chat_id=call.message.chat.id,
							  message_id=call.message.message_id)

		bot.set_state(user_id=call.from_user.id,
					  state=UserState.count_photos,
					  chat_id=call.message.chat.id)

@bot.message_handler(state=UserState.count_photos)
@logger.catch
def get_count_photos(message: Message) -> None:
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞.
	:param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram
	:return: None
	"""
	if message.text.isdigit() and (0 < int(message.text) < 11):
		with bot.retrieve_data(user_id=message.from_user.id,
							   chat_id=message.chat.id) as data:

			data["count_photos"] = int(message.text)
			data["need_photo"] = True
			data["date_in"] = CalendarKeyboard()

			markup = data["date_in"].month()

			bot.send_message(chat_id=message.chat.id,
							 text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞:",
							 reply_markup=markup)

			bot.set_state(user_id=message.from_user.id,
						  state=UserState.date_in,
						  chat_id=message.chat.id)
	else:
		bot.send_message(chat_id=message.chat.id,
						 text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–í–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10!</b>",
						 parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data.startswith("__"))
@logger.catch
def calendar_callback(call: CallbackQuery):
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.
	:return: None
	"""
	with bot.retrieve_data(call.from_user.id, call.message.chat.id) as data:
		if bot.get_state(user_id=call.from_user.id,
						 chat_id=call.message.chat.id) == "UserState:date_in":

			keyboard = data["date_in"]

		elif bot.get_state(user_id=call.from_user.id,
						   chat_id=call.message.chat.id) == "UserState:date_out":

			keyboard = data["date_out"]

	command, data = call.data.split(":")
	arguments = list(map(int, data.split()))

	if command == "__month":
		markup = keyboard.month(*arguments)

	elif command == "__months":
		markup = keyboard.months(*arguments)

	elif command == "__years":
		markup = keyboard.years(*arguments)

	else:
		markup = InlineKeyboardMarkup()

	bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("set_date:"))
@logger.catch
def set_date(call: CallbackQuery) -> None:
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
	:return: None
	"""
	day, month, year = map(int, call.data.split(":")[1].split())
	date_out_received = False

	with bot.retrieve_data(user_id=call.from_user.id,
						   chat_id=call.message.chat.id) as data:

		if bot.get_state(user_id=call.from_user.id,
						 chat_id=call.message.chat.id) == "UserState:date_in":

			data["date_in"] = date(year=year, month=month, day=day)
			selected_date = data["date_in"].strftime("%d.%m.%Y")

			bot.edit_message_text(text=f"üìÜ –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {selected_date}",
								  chat_id=call.message.chat.id,
								  message_id=call.message.message_id)

			bot.set_state(user_id=call.from_user.id,
						  state=UserState.date_out,
						  chat_id=call.message.chat.id)

			data["date_out"] = CalendarKeyboard(min_date=data["date_in"] + timedelta(days=1))
			markup = data["date_out"].month()

			bot.send_message(chat_id=call.message.chat.id,
							 text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞:",
							 reply_markup=markup)

		elif bot.get_state(user_id=call.from_user.id,
						   chat_id=call.message.chat.id) == "UserState:date_out":

			data["date_out"] = date(year=year, month=month, day=day)
			selected_date = data["date_out"].strftime("%d.%m.%Y")

			bot.edit_message_text(text=f"üìÜ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {selected_date}",
								  chat_id=call.message.chat.id,
								  message_id=call.message.message_id)

			date_out_received = True

	if date_out_received:
		if data["command"] in ("lowprice", "highprice"):
			hotels_list(user_id=call.from_user.id,
						chat_id=call.message.chat.id,
						name=call.from_user.full_name,
						username=call.from_user.username)

		elif data["command"] == "bestdeal":
			bot.send_message(chat_id=call.message.chat.id,
							 text="–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é\n—Ü–µ–Ω—É –∑–∞"
								  " 1 –Ω–æ—á—å –≤ $ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ù–∞–ø—Ä–∏–º–µ—Ä: 100 150")

			bot.set_state(user_id=call.from_user.id,
						  state=UserState.min_price,
						  chat_id=call.message.chat.id)

@bot.message_handler(state=UserState.min_price)
@logger.catch
def get_price_range(message: Message) -> None:
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ 1 –Ω–æ—á—å.
	:param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram
	:return: None
	"""
	try:
		min_price, max_price = map(int, message.text.split())

		if min_price > max_price:
			min_price, max_price = max_price, min_price
			bot.send_message(chat_id=message.chat.id,
							 text="–í—ã –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å "
								  "–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π! –ù–æ —è –≤—Å—ë —Å–¥–µ–ª–∞–ª –∑–∞ –≤–∞—Å.")

		if min_price == max_price:
			bot.send_message(chat_id=message.chat.id,
							 text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–≤–Ω–∞"
								  "\n–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑!")
			return None

		if min_price <= 0:
			bot.send_message(chat_id=message.chat.id,
							 text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞\n–±—ã—Ç—å <b>–±–æ–ª—å—à–µ –Ω–æ–ª—è!</b>",
							 parse_mode="HTML")
			return None

		with bot.retrieve_data(user_id=message.from_user.id,
							   chat_id=message.chat.id) as data:

			data["min_price"] = min_price
			data["max_price"] = max_price

		bot.set_state(user_id=message.from_user.id,
					  state=UserState.max_distance,
					  chat_id=message.chat.id)

		bot.send_message(chat_id=message.chat.id,
						 text="–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ"
							  "\n–≤ –∫–º –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞")

	except ValueError:
		bot.send_message(chat_id=message.chat.id,
						 text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–∞–º –Ω—É–∂–Ω–æ\n–≤–≤–µ—Å—Ç–∏ <b>–¥–≤–∞</b> —á–∏—Å–ª–∞ <b>—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!</b>",
						 parse_mode="HTML")

@bot.message_handler(state=UserState.max_distance)
@logger.catch
def get_max_distance(message: Message) -> None:
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞.
	:param message: —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram
	:return: None
	"""
	try:
		max_distance = int(message.text)

		if max_distance < 0:
			raise ValueError("–í–≤–µ–¥—ë–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –Ω—É–ª—è")

		if max_distance == 0:
			bot.send_message(chat_id=message.chat.id,
							 text="–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <b>–±–æ–ª—å—à–µ –Ω–æ–ª—è!</b>",
							 parse_mode="HTML")
			return None

		with bot.retrieve_data(user_id=message.from_user.id,
							   chat_id=message.chat.id) as data:

			data["max_distance"] = max_distance

		hotels_list(user_id=message.from_user.id,
					chat_id=message.chat.id,
					name=message.from_user.full_name,
					username=message.from_user.username)

	except ValueError:
		bot.send_message(chat_id=message.chat.id,
						 text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ \n<b>—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ</b> —á–∏—Å–ª–æ!",
						 parse_mode="HTML")

@logger.catch
def hotels_list(user_id: str, chat_id: str, name: str, username: str) -> None:
	"""
	–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—Ç–µ–ª—è—Ö.
	:param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	:param chat_id: —á–∞—Ç id
	:param name: –∏–º—è
	:param username: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	:return: None
	"""
	sorting = {
		"lowprice": "PRICE_LOW_TO_HIGH",
		"highprice": "PRICE_HIGHEST_FIRST",
		"bestdeal": "DISTANCE"
	}

	count_hotels = 0
	result = {}
	hotels = ''

	mes = bot.send_message(chat_id=chat_id, text="‚è≥")

	with bot.retrieve_data(user_id=user_id, chat_id=chat_id) as data:
		result["date"] = data["date_str"]
		result["command"] = data["command"]

		if data["command"] == "bestdeal":
			params = {
				"min_price": data["min_price"],
				"max_price": data["max_price"]
			}

		else:
			params = None

		for hotel_data in get_hotels(command=data["command"],
									 region_Id=data["city_id"],
									 check_In_Date=data["date_in"],
									 check_Out_Date=data["date_out"],
									 sort=sorting[data["command"]],
									 count_photos=data["count_photos"],
									 count_hotels=data["count_hotels"],
									 params=params):
			if hotel_data is None:
				bot.edit_message_text(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!"
										   "\n–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥!",
									  chat_id=chat_id, message_id=mes.message_id)

				bot.set_state(user_id=user_id,
							  state=UserState.city_id,
							  chat_id=chat_id)
				return None

			else:
				if data["command"] == "bestdeal":
					if count_hotels == data["count_hotels"]:
						break

					if not(data["min_price"] <= hotel_data["price"] <= data["max_price"]):
						continue

					distance = float(hotel_data["distance"].split()[0])

					if distance > data["max_distance"]:
						break

				count_hotels += 1

				count_nights = data["date_out"] - data["date_in"]
				text = get_hotel_info_str(data=hotel_data, count_nights=count_nights.days)

				if count_hotels == 1:
					hotels += text

				else:
					hotels += '&&'
					hotels += text

				if len(hotel_data["photos"]) == 0:
					bot.send_message(chat_id=chat_id, text=text,
									 parse_mode="HTML", disable_web_page_preview=True)

				else:
					photos = [InputMediaPhoto(hotel_data['photos'][i_link], caption=text, parse_mode="HTML")
								if i_link == 0
								else InputMediaPhoto(hotel_data['photos'][i_link], caption='')
							  for i_link in range(len(hotel_data['photos']))]

					bot.send_media_group(chat_id=chat_id, media=photos)

				bot.send_location(chat_id=chat_id,
								  latitude=hotel_data["latitude"],
								  longitude=hotel_data["longitude"])

		if count_hotels == data["count_hotels"]:
			bot.send_message(chat_id=chat_id, text="üîç –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω")

		else:
			text = f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –±—ã–ª–æ\n–Ω–∞–π–¥–µ–Ω–æ {count_hotels} –æ—Ç–µ–ª–µ–π –∏–∑ {data['count_hotels']}"

			if count_hotels == 1:
				text = text.replace("–±—ã–ª–æ\n–Ω–∞–π–¥–µ–Ω–æ", "–±—ã–ª\n–Ω–∞–π–¥–µ–Ω", 1)
				text = text.replace("–æ—Ç–µ–ª–µ–π", "–æ—Ç–µ–ª—å", 1)

			elif count_hotels in (2, 3, 4):
				text = text.replace("–æ—Ç–µ–ª–µ–π", "–æ—Ç–µ–ª—è", 1)

			bot.send_message(chat_id=chat_id, text=text)

		date_in = data["date_in"].strftime("%d.%m.%Y")
		date_out = data["date_out"].strftime("%d.%m.%Y")

		request_parameters = "<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n" \
							 f"<b>–ö–æ–º–∞–Ω–¥–∞:</b> /{data['command']}\n" \
							 f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã:</b> {data['date_str']}\n" \
							 f"<b>–ì–æ—Ä–æ–¥:</b> {data['cities'][data['city_id']]}\n" \
							 f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π:</b> {data['count_hotels']}\n" \
							 f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:</b> {data['count_photos']}\n" \
							 f"<b>–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞:</b> {date_in}\n" \
							 f"<b>–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞:</b> {date_out}"

		if data["command"] == "bestdeal":
			min_price = get_price_str(str(data["min_price"]))
			max_price = get_price_str(str(data["max_price"]))

			request_parameters += f"\n<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ 1 –Ω–æ—á—å:</b> {min_price}\n" \
								  f"<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞ 1 –Ω–æ—á—å:</b> {max_price}\n" \
								  f"<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –≥–æ—Ä–æ–¥–∞:</b> {data['max_distance']} –∫–º\n" \
								  f"<b>–ù–∞–π–¥–µ–Ω–æ –æ—Ç–µ–ª–µ–π:</b> {count_hotels} –∏–∑ {data['count_hotels']}"
	user = (user_id, chat_id)

	if HistoryKeyboard.all_keyboards.get(user):
		message_id = HistoryKeyboard.all_keyboards[user].message_id
		HistoryKeyboard.all_keyboards[user] = None

		bot.delete_message(chat_id=chat_id, message_id=message_id)

	bot.delete_message(chat_id=chat_id, message_id=mes.message_id)
	bot.delete_state(user_id=user_id, chat_id=chat_id)

	result["request_parameters"] = request_parameters
	result["result"] = hotels
	result["telegram_id"] = user_id
	result["chat_id"] = chat_id
	result["name"] = name
	result["username"] = username

	save_information(data=result)
